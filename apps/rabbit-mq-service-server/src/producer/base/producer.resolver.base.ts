/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Producer } from "./Producer";
import { ProducerCountArgs } from "./ProducerCountArgs";
import { ProducerFindManyArgs } from "./ProducerFindManyArgs";
import { ProducerFindUniqueArgs } from "./ProducerFindUniqueArgs";
import { DeleteProducerArgs } from "./DeleteProducerArgs";
import { ProducerService } from "../producer.service";
@graphql.Resolver(() => Producer)
export class ProducerResolverBase {
  constructor(protected readonly service: ProducerService) {}

  async _producersMeta(
    @graphql.Args() args: ProducerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Producer])
  async producers(
    @graphql.Args() args: ProducerFindManyArgs
  ): Promise<Producer[]> {
    return this.service.producers(args);
  }

  @graphql.Query(() => Producer, { nullable: true })
  async producer(
    @graphql.Args() args: ProducerFindUniqueArgs
  ): Promise<Producer | null> {
    const result = await this.service.producer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Producer)
  async deleteProducer(
    @graphql.Args() args: DeleteProducerArgs
  ): Promise<Producer | null> {
    try {
      return await this.service.deleteProducer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
