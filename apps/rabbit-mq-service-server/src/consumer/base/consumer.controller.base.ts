/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsumerService } from "../consumer.service";
import { ConsumerCreateInput } from "./ConsumerCreateInput";
import { Consumer } from "./Consumer";
import { ConsumerFindManyArgs } from "./ConsumerFindManyArgs";
import { ConsumerWhereUniqueInput } from "./ConsumerWhereUniqueInput";
import { ConsumerUpdateInput } from "./ConsumerUpdateInput";

export class ConsumerControllerBase {
  constructor(protected readonly service: ConsumerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consumer })
  async createConsumer(
    @common.Body() data: ConsumerCreateInput
  ): Promise<Consumer> {
    return await this.service.createConsumer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consumer] })
  @ApiNestedQuery(ConsumerFindManyArgs)
  async consumers(@common.Req() request: Request): Promise<Consumer[]> {
    const args = plainToClass(ConsumerFindManyArgs, request.query);
    return this.service.consumers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consumer(
    @common.Param() params: ConsumerWhereUniqueInput
  ): Promise<Consumer | null> {
    const result = await this.service.consumer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsumer(
    @common.Param() params: ConsumerWhereUniqueInput,
    @common.Body() data: ConsumerUpdateInput
  ): Promise<Consumer | null> {
    try {
      return await this.service.updateConsumer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consumer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsumer(
    @common.Param() params: ConsumerWhereUniqueInput
  ): Promise<Consumer | null> {
    try {
      return await this.service.deleteConsumer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
